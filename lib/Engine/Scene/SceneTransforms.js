import { SceneMode } from '../../type';
import BoundingRectangle from '../Core/BoundingRectangle';
import Cartesian2 from '../Core/Cartesian2';
import Cartesian3 from '../Core/Cartesian3';
import Cartesian4 from '../Core/Cartesian4';
import { defined } from '../Core/Defined';
import Matrix4 from '../Core/Matrix4';
import OrthographicFrustum from '../Core/OrthographicFrustum';
import OrthographicOffCenterFrustum from '../Core/OrthographicOffCenterFrustum';
const worldToClip = (position, eyeOffset, camera, result) => {
    const viewMatrix = camera.viewMatrix;
    const positionEC = Matrix4.multiplyByVector(viewMatrix, Cartesian4.fromElements(position.x, position.y, position.z, 1.0));
    const zEyeOffset = Cartesian3.multiplyComponents(eyeOffset, Cartesian3.normalize(positionEC, new Cartesian3()));
    positionEC.x += eyeOffset.x + zEyeOffset.x;
    positionEC.y += eyeOffset.y + zEyeOffset.y;
    positionEC.z += zEyeOffset.z;
    return Matrix4.multiplyByVector(camera.frustum.projectionMatrix, positionEC, result);
};
export default class SceneTransforms {
    static computeActualEllipsoidPosition;
    static clipToGLWindowCoordinates;
    static worldWithEyeOffsetToWindowCoordinates;
    static worldToWindowCoordinates;
}
SceneTransforms.computeActualEllipsoidPosition = function (frameState, position, result) {
    const mode = frameState.mode;
    if (mode === SceneMode.SCENE3D) {
        return Cartesian3.clone(position, result);
    }
};
SceneTransforms.clipToGLWindowCoordinates = function (viewport, position, result) {
    Cartesian3.divideByScalar(position, position.w, position);
    const viewportTransform = Matrix4.computeViewportTransformation(viewport, 0.0, 1.0);
    const positionWC = Matrix4.multiplyByPoint(viewportTransform, new Cartesian3());
    return Cartesian2.fromCartesian3(positionWC, result);
};
SceneTransforms.worldWithEyeOffsetToWindowCoordinates = function (scene, position, eyeOffset, result = new Cartesian2()) {
    if (!defined(scene)) {
        throw new Error('scene is required');
    }
    if (!defined(position)) {
        throw new Error('position is required');
    }
    const frameState = scene.frameState;
    const actualPosition = SceneTransforms.computeActualEllipsoidPosition(frameState, position);
    if (!defined(actualPosition)) {
        return undefined;
    }
    const canvas = scene.canvas;
    const viewport = new BoundingRectangle();
    viewport.x = 0;
    viewport.y = 0;
    viewport.width = canvas.clientWidth;
    viewport.height = canvas.clientHeight;
    const camera = scene.camera;
    const cameraCentered = false;
    if (frameState.mode !== SceneMode.SCENE2D || cameraCentered) {
        const positionCC = worldToClip(actualPosition, eyeOffset, camera);
        if (positionCC.z < 0 &&
            !(camera.frustum instanceof OrthographicFrustum) &&
            !(camera.frustum instanceof OrthographicOffCenterFrustum)) {
            return undefined;
        }
        result = SceneTransforms.clipToGLWindowCoordinates(viewport, positionCC, result);
    }
    return result;
};
SceneTransforms.worldToWindowCoordinates = function (scene, position, result) {
    return SceneTransforms.worldWithEyeOffsetToWindowCoordinates(scene, position, Cartesian3.ZERO, result);
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiU2NlbmVUcmFuc2Zvcm1zLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL0VuZ2luZS9TY2VuZS9TY2VuZVRyYW5zZm9ybXMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFNBQVMsRUFBRSxNQUFNLFlBQVksQ0FBQTtBQUN0QyxPQUFPLGlCQUFpQixNQUFNLDJCQUEyQixDQUFBO0FBQ3pELE9BQU8sVUFBVSxNQUFNLG9CQUFvQixDQUFBO0FBQzNDLE9BQU8sVUFBVSxNQUFNLG9CQUFvQixDQUFBO0FBQzNDLE9BQU8sVUFBVSxNQUFNLG9CQUFvQixDQUFBO0FBQzNDLE9BQU8sRUFBRSxPQUFPLEVBQUUsTUFBTSxpQkFBaUIsQ0FBQTtBQUN6QyxPQUFPLE9BQU8sTUFBTSxpQkFBaUIsQ0FBQTtBQUNyQyxPQUFPLG1CQUFtQixNQUFNLDZCQUE2QixDQUFBO0FBQzdELE9BQU8sNEJBQTRCLE1BQU0sc0NBQXNDLENBQUE7QUFNL0UsTUFBTSxXQUFXLEdBQUcsQ0FDbEIsUUFBb0IsRUFDcEIsU0FBcUIsRUFDckIsTUFBYyxFQUNkLE1BQW1CLEVBQ25CLEVBQUU7SUFDRixNQUFNLFVBQVUsR0FBRyxNQUFNLENBQUMsVUFBVSxDQUFBO0lBRXBDLE1BQU0sVUFBVSxHQUFHLE9BQU8sQ0FBQyxnQkFBZ0IsQ0FDekMsVUFBVSxFQUNWLFVBQVUsQ0FBQyxZQUFZLENBQUMsUUFBUSxDQUFDLENBQUMsRUFBRSxRQUFRLENBQUMsQ0FBQyxFQUFFLFFBQVEsQ0FBQyxDQUFDLEVBQUUsR0FBRyxDQUFDLENBQ2pFLENBQUE7SUFFRCxNQUFNLFVBQVUsR0FBRyxVQUFVLENBQUMsa0JBQWtCLENBQzlDLFNBQVMsRUFDVCxVQUFVLENBQUMsU0FBUyxDQUFDLFVBQVUsRUFBRSxJQUFJLFVBQVUsRUFBRSxDQUFDLENBQ25ELENBQUE7SUFDRCxVQUFVLENBQUMsQ0FBQyxJQUFJLFNBQVMsQ0FBQyxDQUFDLEdBQUcsVUFBVSxDQUFDLENBQUMsQ0FBQTtJQUMxQyxVQUFVLENBQUMsQ0FBQyxJQUFJLFNBQVMsQ0FBQyxDQUFDLEdBQUcsVUFBVSxDQUFDLENBQUMsQ0FBQTtJQUMxQyxVQUFVLENBQUMsQ0FBQyxJQUFJLFVBQVUsQ0FBQyxDQUFDLENBQUE7SUFFNUIsT0FBTyxPQUFPLENBQUMsZ0JBQWdCLENBQzVCLE1BQU0sQ0FBQyxPQUE4QixDQUFDLGdCQUFnQixFQUN2RCxVQUFVLEVBQ1YsTUFBTSxDQUNQLENBQUE7QUFDSCxDQUFDLENBQUE7QUFDRCxNQUFNLENBQUMsT0FBTyxPQUFPLGVBQWU7SUFDbEMsTUFBTSxDQUFDLDhCQUE4QixDQUlWO0lBQzNCLE1BQU0sQ0FBQyx5QkFBeUIsQ0FJakI7SUFDZixNQUFNLENBQUMscUNBQXFDLENBS2pCO0lBQzNCLE1BQU0sQ0FBQyx3QkFBd0IsQ0FJSjtDQUM1QjtBQUVELGVBQWUsQ0FBQyw4QkFBOEIsR0FBRyxVQUMvQyxVQUFzQixFQUN0QixRQUFvQixFQUNwQixNQUFtQjtJQUVuQixNQUFNLElBQUksR0FBRyxVQUFVLENBQUMsSUFBSSxDQUFBO0lBRTVCLElBQUksSUFBSSxLQUFLLFNBQVMsQ0FBQyxPQUFPLEVBQUUsQ0FBQztRQUMvQixPQUFPLFVBQVUsQ0FBQyxLQUFLLENBQUMsUUFBUSxFQUFFLE1BQU0sQ0FBQyxDQUFBO0lBQzNDLENBQUM7QUFDSCxDQUFDLENBQUE7QUFDRCxlQUFlLENBQUMseUJBQXlCLEdBQUcsVUFDMUMsUUFBMkIsRUFDM0IsUUFBb0IsRUFDcEIsTUFBbUI7SUFFbkIsVUFBVSxDQUFDLGNBQWMsQ0FBQyxRQUFRLEVBQUUsUUFBUSxDQUFDLENBQUMsRUFBRSxRQUFRLENBQUMsQ0FBQTtJQUV6RCxNQUFNLGlCQUFpQixHQUFHLE9BQU8sQ0FBQyw2QkFBNkIsQ0FDN0QsUUFBUSxFQUNSLEdBQUcsRUFDSCxHQUFHLENBQ0osQ0FBQTtJQUNELE1BQU0sVUFBVSxHQUFHLE9BQU8sQ0FBQyxlQUFlLENBQ3hDLGlCQUFpQixFQUNqQixJQUFJLFVBQVUsRUFBRSxDQUNqQixDQUFBO0lBRUQsT0FBTyxVQUFVLENBQUMsY0FBYyxDQUFDLFVBQVUsRUFBRSxNQUFNLENBQUMsQ0FBQTtBQUN0RCxDQUFDLENBQUE7QUFDRCxlQUFlLENBQUMscUNBQXFDLEdBQUcsVUFDdEQsS0FBWSxFQUNaLFFBQW9CLEVBQ3BCLFNBQXFCLEVBQ3JCLFNBQXFCLElBQUksVUFBVSxFQUFFO0lBRXJDLElBQUksQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLEVBQUUsQ0FBQztRQUNwQixNQUFNLElBQUksS0FBSyxDQUFDLG1CQUFtQixDQUFDLENBQUE7SUFDdEMsQ0FBQztJQUVELElBQUksQ0FBQyxPQUFPLENBQUMsUUFBUSxDQUFDLEVBQUUsQ0FBQztRQUN2QixNQUFNLElBQUksS0FBSyxDQUFDLHNCQUFzQixDQUFDLENBQUE7SUFDekMsQ0FBQztJQUVELE1BQU0sVUFBVSxHQUFHLEtBQUssQ0FBQyxVQUFVLENBQUE7SUFDbkMsTUFBTSxjQUFjLEdBQUcsZUFBZSxDQUFDLDhCQUE4QixDQUNuRSxVQUFVLEVBQ1YsUUFBUSxDQUNULENBQUE7SUFFRCxJQUFJLENBQUMsT0FBTyxDQUFDLGNBQWMsQ0FBQyxFQUFFLENBQUM7UUFDN0IsT0FBTyxTQUFTLENBQUE7SUFDbEIsQ0FBQztJQUVELE1BQU0sTUFBTSxHQUFHLEtBQUssQ0FBQyxNQUFNLENBQUE7SUFDM0IsTUFBTSxRQUFRLEdBQUcsSUFBSSxpQkFBaUIsRUFBRSxDQUFBO0lBRXhDLFFBQVEsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFBO0lBQ2QsUUFBUSxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUE7SUFDZCxRQUFRLENBQUMsS0FBSyxHQUFHLE1BQU0sQ0FBQyxXQUFXLENBQUE7SUFDbkMsUUFBUSxDQUFDLE1BQU0sR0FBRyxNQUFNLENBQUMsWUFBWSxDQUFBO0lBRXJDLE1BQU0sTUFBTSxHQUFHLEtBQUssQ0FBQyxNQUFNLENBQUE7SUFDM0IsTUFBTSxjQUFjLEdBQUcsS0FBSyxDQUFBO0lBRTVCLElBQUksVUFBVSxDQUFDLElBQUksS0FBSyxTQUFTLENBQUMsT0FBTyxJQUFJLGNBQWMsRUFBRSxDQUFDO1FBQzVELE1BQU0sVUFBVSxHQUFHLFdBQVcsQ0FBQyxjQUFjLEVBQUUsU0FBUyxFQUFFLE1BQU0sQ0FBQyxDQUFBO1FBQ2pFLElBQ0UsVUFBVSxDQUFDLENBQUMsR0FBRyxDQUFDO1lBQ2hCLENBQUMsQ0FBQyxNQUFNLENBQUMsT0FBTyxZQUFZLG1CQUFtQixDQUFDO1lBQ2hELENBQUMsQ0FBQyxNQUFNLENBQUMsT0FBTyxZQUFZLDRCQUE0QixDQUFDLEVBQ3pELENBQUM7WUFDRCxPQUFPLFNBQVMsQ0FBQTtRQUNsQixDQUFDO1FBRUQsTUFBTSxHQUFHLGVBQWUsQ0FBQyx5QkFBeUIsQ0FDaEQsUUFBUSxFQUNSLFVBQVUsRUFDVixNQUFNLENBQ1AsQ0FBQTtJQUNILENBQUM7SUFFRCxPQUFPLE1BQU0sQ0FBQTtBQUNmLENBQUMsQ0FBQTtBQUNELGVBQWUsQ0FBQyx3QkFBd0IsR0FBRyxVQUN6QyxLQUFZLEVBQ1osUUFBb0IsRUFDcEIsTUFBbUI7SUFFbkIsT0FBTyxlQUFlLENBQUMscUNBQXFDLENBQzFELEtBQUssRUFDTCxRQUFRLEVBQ1IsVUFBVSxDQUFDLElBQUksRUFDZixNQUFNLENBQ1AsQ0FBQTtBQUNILENBQUMsQ0FBQSJ9