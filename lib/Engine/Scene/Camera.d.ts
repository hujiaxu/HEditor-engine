import Cartesian2 from '../Core/Cartesian2';
import Cartesian3 from '../Core/Cartesian3';
import Matrix4 from '../Core/Matrix4';
import Ray from '../Core/Ray';
import PerspectiveFrustum from '../Core/PerspectiveFrustum';
import Scene from './Scene';
import OrthographicFrustum from '../Core/OrthographicFrustum';
import Cartographic from '../Core/Cartographic';
import Cartesian4 from '../Core/Cartesian4';
import Ellipsoid from '../Core/Ellipsoid';
import { CameraViewOptions } from '../../type';
import Rectangle from '../Core/Rectangle';
export default class Camera {
    position: Cartesian3;
    direction: Cartesian3;
    up: Cartesian3;
    right: Cartesian3;
    constrainedAxis: Cartesian3 | undefined;
    positionWC: Cartesian3;
    directionWC: Cartesian3;
    upWC: Cartesian3;
    rightWC: Cartesian3;
    private _positionWC;
    private _directionWC;
    private _upWC;
    private _rightWC;
    private _position;
    private _direction;
    private _up;
    private _right;
    private _transform;
    private _actualTransform;
    private _actualInvTransform;
    private _transformChanged;
    private _modeChanged;
    private _defaultLookAmount;
    private _defaultRotateAmount;
    private _defaultZoomAmount;
    private _viewMatrix;
    scene: Scene;
    private _projection;
    private _positionCartographic;
    private _maxCoord;
    private _mode;
    heading: number;
    pitch: number;
    roll: number;
    get viewMatrix(): Matrix4;
    get transform(): Matrix4;
    get positionCartographic(): Cartographic;
    frustum: PerspectiveFrustum | OrthographicFrustum;
    constructor(scene: Scene);
    private _updateMembers;
    private _calculateOrthographicFrustumWidth;
    _adjustOrthographicFrustum(zooming: boolean): void;
    updateViewMatrix(camera: Camera): void;
    getPickRay(windowPos: Cartesian2, result?: Ray): Ray;
    private _getPickRayPerspective;
    private _getPickRayOrthographic;
    setTransform(transform: Matrix4): void;
    worldToCameraCoordinates(cartesian: Cartesian4, result?: Cartesian4): Cartesian4;
    worldToCameraCoordinatesPoint(cartesian: Cartesian3, result?: Cartesian3): Cartesian3;
    worldToCameraCoordinatesVector(cartesian: Cartesian3, result?: Cartesian3): Cartesian3;
    cameraToWorldCoordinates(cartesian: Cartesian4, result?: Cartesian4): Cartesian4;
    cameraToWorldCoordinatesPoint(cartesian: Cartesian3, result?: Cartesian3): Cartesian3;
    cameraToWorldCoordinatesVector(cartesian: Cartesian3, result?: Cartesian3): Cartesian3;
    private _pickEllipsoid3D;
    pickEllipsoid(windowPosition: Cartesian2, ellipsoid: Ellipsoid, result?: Cartesian3): Cartesian3 | undefined;
    setView(options: CameraViewOptions): void;
    getRectangleCameraCoordinates(rectangle: Rectangle, result?: Cartesian3): Cartesian3 | undefined;
    private _rectangleCameraPosition3D;
    private _computeD;
    private _directionUpToHeadingPitchRoll;
    private _setView3D;
    private _getHeading;
    private _getPitch;
    private _getRoll;
    private _clampMove2D;
    look(axis: Cartesian3, angle?: number): void;
    lookDown(amount?: number): void;
    lookUp(amount?: number): void;
    lookRight(amount?: number): void;
    lookLeft(amount?: number): void;
    move(direction: Cartesian3, amount: number): void;
    private _rotateVertical;
    private _rotateHorizonTal;
    rotate(axis: Cartesian3, angle?: number): void;
    rotateDown(angle?: number): void;
    rotateUp(angle?: number): void;
    rotateRight(angle?: number): void;
    rotateLeft(angle?: number): void;
    private _zoom3D;
    zoomIn(amount?: number): void;
    zoomOut(amount?: number): void;
}
