export default class Cartesian3 {
    static cross: (left: Cartesian3, right: Cartesian3, result?: Cartesian3) => Cartesian3;
    static dot: (left: Cartesian3, right: Cartesian3) => number;
    static subtract: (left: Cartesian3, right: Cartesian3, result?: Cartesian3) => Cartesian3;
    static add: (left: Cartesian3, right: Cartesian3, result?: Cartesian3) => Cartesian3;
    x: number;
    y: number;
    z: number;
    static multiplyByScalar: (cartesian: Cartesian3, scalar: number, result?: Cartesian3) => Cartesian3;
    static multiply: (left: Cartesian3, right: Cartesian3, result?: Cartesian3) => Cartesian3;
    static clone: (cartesian: Cartesian3, result?: Cartesian3) => Cartesian3;
    static ZERO: Cartesian3;
    static distance: (left: Cartesian3, right: Cartesian3) => number;
    static distanceSquared: (left: Cartesian3, right: Cartesian3) => number;
    static equals: (left: Cartesian3, right: Cartesian3) => boolean;
    static magnitude: (cartesian: Cartesian3) => number;
    static normalize: (cartesian: Cartesian3, result?: Cartesian3) => Cartesian3;
    static magnitudeSquared: (cartesian: Cartesian3) => number;
    static multiplyComponents: (left: Cartesian3, right: Cartesian3, result?: Cartesian3) => Cartesian3;
    static equalsEpsilon: (left: Cartesian3, right: Cartesian3, relativeEpsilon: number, absoluteEpsilon?: number) => boolean;
    static angleBetween: (left: Cartesian3, right: Cartesian3) => number;
    static abs: (cartesian: Cartesian3, result?: Cartesian3) => Cartesian3;
    static UNIT_X: Cartesian3;
    static UNIT_Y: Cartesian3;
    static UNIT_Z: Cartesian3;
    static mostOrthogonalAxis: (cartesian: Cartesian3, result?: Cartesian3) => Cartesian3;
    static divideByScalar: (cartesian: Cartesian3, scalar: number, result?: Cartesian3) => Cartesian3;
    static negate: (cartesian: Cartesian3, result?: Cartesian3) => Cartesian3;
    static fromElements: (x: number, y: number, z: number, result?: Cartesian3) => Cartesian3;
    static unpack: (array: number[], index: number, result?: Cartesian3) => Cartesian3;
    static projectVector: (cartesian: Cartesian3, direction: Cartesian3, result?: Cartesian3) => Cartesian3;
    constructor(x?: number, y?: number, z?: number);
}
