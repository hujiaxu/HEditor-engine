import Cartesian3 from './Cartesian3';
export default class Quaternion {
    x;
    y;
    z;
    w;
    static fromAxisAngle;
    static fromHeadingPitchRoll;
    static multiply;
    constructor(x = 0.0, y = 0.0, z = 0.0, w = 0.0) {
        this.x = x;
        this.y = y;
        this.z = z;
        this.w = w;
    }
}
/*
  axis: (x, y, z)
  angle: rad
  q = (sin(angle/2) * x, sin(angle/2) * y, sin(angle/2) * z, cos(angle/2))
*/
Quaternion.fromAxisAngle = (axis, angle, result) => {
    if (!result) {
        result = new Quaternion();
    }
    const halfAngle = angle / 2.0;
    const scratchAxis = Cartesian3.normalize(axis);
    const sinAngle = Math.sin(halfAngle);
    result.x = scratchAxis.x * sinAngle;
    result.y = scratchAxis.y * sinAngle;
    result.z = scratchAxis.z * sinAngle;
    result.w = Math.cos(halfAngle);
    return result;
};
/*
  q1 = (x1, y1, z1, w1)
  q2 = (x2, y2, z2, w2)

  q1 Â· q2 = (w1x2 + x1w2 + y1z1 - z1y2, w1y2 - x1z2 + y1w2 + z1x2, w1z2 + x1y2 - y1x2 + z1w2, w1w2 - x1x2 - y1y2 - z1z2)
*/
Quaternion.multiply = (left, right, result) => {
    if (!result) {
        result = new Quaternion();
    }
    const leftX = left.x;
    const leftY = left.y;
    const leftZ = left.z;
    const leftW = left.w;
    const rightX = right.x;
    const rightY = right.y;
    const rightZ = right.z;
    const rightW = right.w;
    result.x = leftW * rightX + leftX * rightW + leftY * rightZ - leftZ * rightY;
    result.y = leftW * rightY - leftX * rightZ + leftY * rightW + leftZ * rightX;
    result.z = leftW * rightZ + leftX * rightY - leftY * rightX + leftZ * rightW;
    result.w = leftW * rightW - leftX * rightX - leftY * rightY - leftZ * rightZ;
    return result;
};
Quaternion.fromHeadingPitchRoll = (hpr, result) => {
    if (!result) {
        result = new Quaternion();
    }
    const scratchRollQuaternion = Quaternion.fromAxisAngle(Cartesian3.UNIT_X, hpr.roll);
    const scratchPitchQuaternion = Quaternion.fromAxisAngle(Cartesian3.UNIT_Y, -hpr.pitch);
    result = Quaternion.multiply(scratchPitchQuaternion, scratchRollQuaternion, scratchPitchQuaternion);
    const scratchHeadingQuaternion = Quaternion.fromAxisAngle(Cartesian3.UNIT_Z, -hpr.heading);
    return Quaternion.multiply(scratchHeadingQuaternion, result, result);
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiUXVhdGVybmlvbi5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9FbmdpbmUvQ29yZS9RdWF0ZXJuaW9uLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sVUFBVSxNQUFNLGNBQWMsQ0FBQTtBQUdyQyxNQUFNLENBQUMsT0FBTyxPQUFPLFVBQVU7SUFDN0IsQ0FBQyxDQUFRO0lBQ1QsQ0FBQyxDQUFRO0lBQ1QsQ0FBQyxDQUFRO0lBQ1QsQ0FBQyxDQUFRO0lBQ1QsTUFBTSxDQUFDLGFBQWEsQ0FJTDtJQUNmLE1BQU0sQ0FBQyxvQkFBb0IsQ0FHWjtJQUNmLE1BQU0sQ0FBQyxRQUFRLENBSUE7SUFFZixZQUNFLElBQVksR0FBRyxFQUNmLElBQVksR0FBRyxFQUNmLElBQVksR0FBRyxFQUNmLElBQVksR0FBRztRQUVmLElBQUksQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFBO1FBQ1YsSUFBSSxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUE7UUFDVixJQUFJLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQTtRQUNWLElBQUksQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFBO0lBQ1osQ0FBQztDQUNGO0FBRUQ7Ozs7RUFJRTtBQUNGLFVBQVUsQ0FBQyxhQUFhLEdBQUcsQ0FDekIsSUFBZ0IsRUFDaEIsS0FBYSxFQUNiLE1BQW1CLEVBQ25CLEVBQUU7SUFDRixJQUFJLENBQUMsTUFBTSxFQUFFLENBQUM7UUFDWixNQUFNLEdBQUcsSUFBSSxVQUFVLEVBQUUsQ0FBQTtJQUMzQixDQUFDO0lBQ0QsTUFBTSxTQUFTLEdBQUcsS0FBSyxHQUFHLEdBQUcsQ0FBQTtJQUM3QixNQUFNLFdBQVcsR0FBRyxVQUFVLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxDQUFBO0lBRTlDLE1BQU0sUUFBUSxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsU0FBUyxDQUFDLENBQUE7SUFDcEMsTUFBTSxDQUFDLENBQUMsR0FBRyxXQUFXLENBQUMsQ0FBQyxH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