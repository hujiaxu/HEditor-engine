import defaultValue from './DefaultValue';
import defined from './Defined';
const HEditorMath = {
    PI: Math.PI,
    TWO_PI: 2.0 * Math.PI,
    PI_OVER_TWO: Math.PI / 2.0,
    zeroToTwoPi: function (angle) {
        if (!defined(angle)) {
            throw new Error('angle is required.');
        }
        if (angle >= 0 && angle < HEditorMath.TWO_PI) {
            return angle;
        }
        const mod = this.mod(angle, HEditorMath.TWO_PI);
        if (Math.abs(mod) < HEditorMath.EPSILON14 &&
            Math.abs(angle) > HEditorMath.EPSILON14) {
            return this.TWO_PI;
        }
        return mod;
    },
    mod: function (m, n) {
        if (!defined(m) || !defined(n)) {
            throw new Error('m and n are required.');
        }
        if (n === 0) {
            throw new Error('divisor cannot be 0.');
        }
        if (this.sign(m) === this.sign(n) && Math.abs(m) < Math.abs(n)) {
            return m;
        }
        return ((m % n) + n) % n;
    },
    cos: function (radians) {
        return Math.cos(radians);
    },
    sin: function (radians) {
        return Math.sin(radians);
    },
    toRadians: function (degrees) {
        return degrees * HEditorMath.RADIANS_PER_DEGREE;
    },
    toDegrees: function (radians) {
        return radians * HEditorMath.DEGREES_PER_RADIAN;
    },
    RADIANS_PER_DEGREE: Math.PI / 180.0,
    DEGREES_PER_RADIAN: 180.0 / Math.PI,
    EPSILON1: 0.1,
    EPSILON2: 0.01,
    EPSILON3: 0.001,
    EPSILON4: 0.0001,
    EPSILON5: 0.00001,
    EPSILON6: 0.000001,
    EPSILON7: 0.0000001,
    EPSILON8: 0.00000001,
    EPSILON9: 0.000000001,
    EPSILON10: 0.0000000001,
    EPSILON11: 0.00000000001,
    EPSILON12: 0.000000000001,
    EPSILON13: 0.0000000000001,
    EPSILON14: 0.00000000000001,
    EPSILON15: 0.000000000000001,
    LUNAR_RADIUS: 1737400.0,
    equalsEpsilon: (left, right, relativeEpsilon, absoluteEpsilon) => {
        if (!defined(left) || !defined(right)) {
            throw new Error('left and right are required.');
        }
        relativeEpsilon = defaultValue(relativeEpsilon, 0.0);
        absoluteEpsilon = defaultValue(absoluteEpsilon, relativeEpsilon);
        const absDiff = Math.abs(left - right);
        return (absDiff <= absoluteEpsilon ||
            absDiff <= relativeEpsilon * Math.max(Math.abs(left), Math.abs(right)));
    },
    sign: function (value) {
        value = +value;
        if (value === 0 || value !== value) {
            return value;
        }
        return value > 0 ? 1 : -1;
    },
    clamp: function (value, min, max) {
        return value < min ? min : value > max ? max : value;
    },
    acosClamped: function (value) {
        return Math.acos(HEditorMath.clamp(value, -1.0, 1.0));
    }
};
Object.freeze(HEditorMath);
export default HEditorMath;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiTWF0aC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9FbmdpbmUvQ29yZS9NYXRoLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sWUFBWSxNQUFNLGdCQUFnQixDQUFBO0FBQ3pDLE9BQU8sT0FBTyxNQUFNLFdBQVcsQ0FBQTtBQUUvQixNQUFNLFdBQVcsR0FBRztJQUNsQixFQUFFLEVBQUUsSUFBSSxDQUFDLEVBQUU7SUFDWCxNQUFNLEVBQUUsR0FBRyxHQUFHLElBQUksQ0FBQyxFQUFFO0lBQ3JCLFdBQVcsRUFBRSxJQUFJLENBQUMsRUFBRSxHQUFHLEdBQUc7SUFDMUIsV0FBVyxFQUFFLFVBQVUsS0FBYTtRQUNsQyxJQUFJLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQyxFQUFFLENBQUM7WUFDcEIsTUFBTSxJQUFJLEtBQUssQ0FBQyxvQkFBb0IsQ0FBQyxDQUFBO1FBQ3ZDLENBQUM7UUFFRCxJQUFJLEtBQUssSUFBSSxDQUFDLElBQUksS0FBSyxHQUFHLFdBQVcsQ0FBQyxNQUFNLEVBQUUsQ0FBQztZQUM3QyxPQUFPLEtBQUssQ0FBQTtRQUNkLENBQUM7UUFFRCxNQUFNLEdBQUcsR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFDLEtBQUssRUFBRSxXQUFXLENBQUMsTUFBTSxDQUFDLENBQUE7UUFDL0MsSUFDRSxJQUFJLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxHQUFHLFdBQVcsQ0FBQyxTQUFTO1lBQ3JDLElBQUksQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLEdBQUcsV0FBVyxDQUFDLFNBQVMsRUFDdkMsQ0FBQztZQUNELE9BQU8sSUFBSSxDQUFDLE1BQU0sQ0FBQTtRQUNwQixDQUFDO1FBRUQsT0FBTyxHQUFHLENBQUE7SUFDWixDQUFDO0lBQ0QsR0FBRyxFQUFFLFVBQVUsQ0FBUyxFQUFFLENBQVM7UUFDakMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxD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SyxLQUFLLEVBQUUsQ0FBQztZQUNuQyxPQUFPLEtBQUssQ0FBQTtRQUNkLENBQUM7UUFDRCxPQUFPLEtBQUssR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUE7SUFDM0IsQ0FBQztJQUVELEtBQUssRUFBRSxVQUFVLEtBQWEsRUFBRSxHQUFXLEVBQUUsR0FBVztRQUN0RCxPQUFPLEtBQUssR0FBRyxHQUFHLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsS0FBSyxHQUFHLEdBQUcsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUE7SUFDdEQsQ0FBQztJQUVELFdBQVcsRUFBRSxVQUFVLEtBQWE7UUFDbEMsT0FBTyxJQUFJLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxLQUFLLENBQUMsS0FBSyxFQUFFLENBQUMsR0FBRyxFQUFFLEdBQUcsQ0FBQyxDQUFDLENBQUE7SUFDdkQsQ0FBQztDQUNGLENBQUE7QUFFRCxNQUFNLENBQUMsTUFBTSxDQUFDLFdBQVcsQ0FBQyxDQUFBO0FBRTFCLGVBQWUsV0FBVyxDQUFBIn0=