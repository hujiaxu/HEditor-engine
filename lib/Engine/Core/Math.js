import defaultValue from './DefaultValue';
import { defined } from './Defined';
const HEditorMath = {
    PI: Math.PI,
    TWO_PI: 2.0 * Math.PI,
    PI_OVER_TWO: Math.PI / 2.0,
    zeroToTwoPi: function (angle) {
        if (!defined(angle)) {
            throw new Error('angle is required.');
        }
        if (angle >= 0 && angle < HEditorMath.TWO_PI) {
            return angle;
        }
        const mod = this.mod(angle, HEditorMath.TWO_PI);
        if (Math.abs(mod) < HEditorMath.EPSILON14 &&
            Math.abs(angle) > HEditorMath.EPSILON14) {
            return this.TWO_PI;
        }
        return mod;
    },
    mod: function (m, n) {
        if (!defined(m) || !defined(n)) {
            throw new Error('m and n are required.');
        }
        if (n === 0) {
            throw new Error('divisor cannot be 0.');
        }
        if (this.sign(m) === this.sign(n) && Math.abs(m) < Math.abs(n)) {
            return m;
        }
        return ((m % n) + n) % n;
    },
    cos: function (radians) {
        return Math.cos(radians);
    },
    sin: function (radians) {
        return Math.sin(radians);
    },
    toRadians: function (degrees) {
        return degrees * HEditorMath.RADIANS_PER_DEGREE;
    },
    toDegrees: function (radians) {
        return radians * HEditorMath.DEGREES_PER_RADIAN;
    },
    RADIANS_PER_DEGREE: Math.PI / 180.0,
    DEGREES_PER_RADIAN: 180.0 / Math.PI,
    EPSILON1: 0.1,
    EPSILON2: 0.01,
    EPSILON3: 0.001,
    EPSILON4: 0.0001,
    EPSILON5: 0.00001,
    EPSILON6: 0.000001,
    EPSILON7: 0.0000001,
    EPSILON8: 0.00000001,
    EPSILON9: 0.000000001,
    EPSILON10: 0.0000000001,
    EPSILON11: 0.00000000001,
    EPSILON12: 0.000000000001,
    EPSILON13: 0.0000000000001,
    EPSILON14: 0.00000000000001,
    EPSILON15: 0.000000000000001,
    LUNAR_RADIUS: 1737400.0,
    equalsEpsilon: (left, right, relativeEpsilon, absoluteEpsilon) => {
        if (!defined(left) || !defined(right)) {
            throw new Error('left and right are required.');
        }
        relativeEpsilon = defaultValue(relativeEpsilon, 0.0);
        absoluteEpsilon = defaultValue(absoluteEpsilon, relativeEpsilon);
        const absDiff = Math.abs(left - right);
        return (absDiff <= absoluteEpsilon ||
            absDiff <= relativeEpsilon * Math.max(Math.abs(left), Math.abs(right)));
    },
    sign: function (value) {
        value = +value;
        if (value === 0 || value !== value) {
            return value;
        }
        return value > 0 ? 1 : -1;
    },
    clamp: function (value, min, max) {
        return value < min ? min : value > max ? max : value;
    },
    acosClamped: function (value) {
        return Math.acos(HEditorMath.clamp(value, -1.0, 1.0));
    }
};
Object.freeze(HEditorMath);
export default HEditorMath;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiTWF0aC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9FbmdpbmUvQ29yZS9NYXRoLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sWUFBWSxNQUFNLGdCQUFnQixDQUFBO0FBQ3pDLE9BQU8sRUFBRSxPQUFPLEVBQUUsTUFBTSxXQUFXLENBQUE7QUFFbkMsTUFBTSxXQUFXLEdBQUc7SUFDbEIsRUFBRSxFQUFFLElBQUksQ0FBQyxFQUFFO0lBQ1gsTUFBTSxFQUFFLEdBQUcsR0FBRyxJQUFJLENBQUMsRUFBRTtJQUNyQixXQUFXLEVBQUUsSUFBSSxDQUFDLEVBQUUsR0FBRyxHQUFHO0lBQzFCLFdBQVcsRUFBRSxVQUFVLEtBQWE7UUFDbEMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDO1lBQ3BCLE1BQU0sSUFBSSxLQUFLLENBQUMsb0JBQW9CLENBQUMsQ0FBQTtRQUN2QyxDQUFDO1FBRUQsSUFBSSxLQUFLLElBQUksQ0FBQyxJQUFJLEtBQUssR0FBRyxXQUFXLENBQUMsTUFBTSxFQUFFLENBQUM7WUFDN0MsT0FBTyxLQUFLLENBQUE7UUFDZCxDQUFDO1FBRUQsTUFBTSxHQUFHLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxLQUFLLEVBQUUsV0FBVyxDQUFDLE1BQU0sQ0FBQyxDQUFBO1FBQy9DLElBQ0UsSUFBSSxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsR0FBRyxXQUFXLENBQUMsU0FBUztZQUNyQyxJQUFJLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxHQUFHLFdBQVcsQ0FBQyxTQUFTLEVBQ3ZDLENBQUM7WUFDRCxPQUFPLElBQUksQ0FBQyxNQUFNLENBQUE7UUFDcEIsQ0FBQztRQUVELE9BQU8sR0FBRyxDQUFBO0lBQ1osQ0FBQztJQUNELEdBQUcsRUFBRSxVQUFVLENBQVMsRUFBRSxDQUFTO1FBQ2pDLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxP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SSxLQUFLLEtBQUssS0FBSyxFQUFFLENBQUM7WUFDbkMsT0FBTyxLQUFLLENBQUE7UUFDZCxDQUFDO1FBQ0QsT0FBTyxLQUFLLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFBO0lBQzNCLENBQUM7SUFFRCxLQUFLLEVBQUUsVUFBVSxLQUFhLEVBQUUsR0FBVyxFQUFFLEdBQVc7UUFDdEQsT0FBTyxLQUFLLEdBQUcsR0FBRyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLEtBQUssR0FBRyxHQUFHLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFBO0lBQ3RELENBQUM7SUFFRCxXQUFXLEVBQUUsVUFBVSxLQUFhO1FBQ2xDLE9BQU8sSUFBSSxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsS0FBSyxDQUFDLEtBQUssRUFBRSxDQUFDLEdBQUcsRUFBRSxHQUFHLENBQUMsQ0FBQyxDQUFBO0lBQ3ZELENBQUM7Q0FDRixDQUFBO0FBRUQsTUFBTSxDQUFDLE1BQU0sQ0FBQyxXQUFXLENBQUMsQ0FBQTtBQUUxQixlQUFlLFdBQVcsQ0FBQSJ9