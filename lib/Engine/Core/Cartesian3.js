export default class Cartesian3 {
    static cross;
    static dot;
    static subtract;
    static add;
    x;
    y;
    z;
    static multiplyByScalar;
    static multiply;
    static clone;
    static ZERO;
    static distance;
    static distanceSquared;
    constructor(x, y, z) {
        this.x = x || 0;
        this.y = y || 0;
        this.z = z || 0;
    }
}
Cartesian3.cross = function (left, right, result) {
    if (!result) {
        result = new Cartesian3();
    }
    const x = left.y * right.z - left.z * right.y;
    const y = left.z * right.x - left.x * right.z;
    const z = left.x * right.y - left.y * right.x;
    result.x = x;
    result.y = y;
    result.z = z;
    return result;
};
Cartesian3.dot = function (left, right) {
    return left.x * right.x + left.y * right.y + left.z * right.z;
};
Cartesian3.subtract = function (left, right, result) {
    if (!result) {
        result = new Cartesian3();
    }
    result.x = left.x - right.x;
    result.y = left.y - right.y;
    result.z = left.z - right.z;
    return result;
};
Cartesian3.add = function (left, right, result) {
    if (!result) {
        result = new Cartesian3();
    }
    result.x = left.x + right.x;
    result.y = left.y + right.y;
    result.z = left.z + right.z;
    return result;
};
Cartesian3.multiplyByScalar = function (cartesian, scalar, result) {
    if (!result) {
        result = new Cartesian3();
    }
    result.x = cartesian.x * scalar;
    result.y = cartesian.y * scalar;
    result.z = cartesian.z * scalar;
    return result;
};
Cartesian3.multiply = function (left, right, result) {
    if (!result) {
        result = new Cartesian3();
    }
    result.x = left.x * right.x;
    result.y = left.y * right.y;
    result.z = left.z * right.z;
    return result;
};
Cartesian3.clone = function (cartesian) {
    return new Cartesian3(cartesian.x, cartesian.y, cartesian.z);
};
Cartesian3.ZERO = new Cartesian3(0, 0, 0);
Cartesian3.distance = function (left, right) {
    return Math.sqrt(Cartesian3.distanceSquared(left, right));
};
Cartesian3.distanceSquared = function (left, right) {
    const x = left.x - right.x;
    const y = left.y - right.y;
    const z = left.z - right.z;
    return x * x + y * y + z * z;
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQ2FydGVzaWFuMy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9FbmdpbmUvQ29yZS9DYXJ0ZXNpYW4zLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE1BQU0sQ0FBQyxPQUFPLE9BQU8sVUFBVTtJQUM3QixNQUFNLENBQUMsS0FBSyxDQUlHO0lBQ2YsTUFBTSxDQUFDLEdBQUcsQ0FBaUQ7SUFDM0QsTUFBTSxDQUFDLFFBQVEsQ0FJQTtJQUNmLE1BQU0sQ0FBQyxHQUFHLENBSUs7SUFFZixDQUFDLENBQVE7SUFDVCxDQUFDLENBQVE7SUFDVCxDQUFDLENBQVE7SUFDVCxNQUFNLENBQUMsZ0JBQWdCLENBSVI7SUFDZixNQUFNLENBQUMsUUFBUSxDQUlBO0lBQ2YsTUFBTSxDQUFDLEtBQUssQ0FBdUM7SUFDbkQsTUFBTSxDQUFDLElBQUksQ0FBWTtJQUN2QixNQUFNLENBQUMsUUFBUSxDQUFpRDtJQUNoRSxNQUFNLENBQUMsZUFBZSxDQUFpRDtJQUN2RSxZQUFZLENBQVUsRUFBRSxDQUFVLEVBQUUsQ0FBVTtRQUM1QyxJQUFJLENBQUMsQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLENBQUE7UUFDZixJQUFJLENBQUMsQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLENBQUE7UUFDZixJQUFJLENBQUMsQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLENBQUE7SUFDakIsQ0FBQztDQUNGO0FBRUQsVUFBVSxDQUFDLEtBQUssR0FBRyxVQUNqQixJQUFnQixFQUNoQixLQUFpQixFQUNqQixNQUFtQjtJQUVuQixJQUFJLENBQUMsTUFBTSxFQUFFLENBQUM7UUFDWixNQUFNLEdBQUcsSUFBSSxVQUFVLEVBQUUsQ0FBQTtJQUMzQixDQUFDO0lBQ0QsTUFBTSxDQUFDLEdBQUcsSUFBSSxDQUFDLENBQUMsR0FBRyxLQUFLLENBQUMsQ0FBQyxHQUFHLElBQUksQ0FBQyxDQUFDLEdBQUcsS0FBSyxDQUFDLENBQUMsQ0FBQTtJQUM3QyxNQUFN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