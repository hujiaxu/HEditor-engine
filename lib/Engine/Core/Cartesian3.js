import defined from './Defined';
import HEditorMath from './Math';
export default class Cartesian3 {
    static cross;
    static dot;
    static subtract;
    static add;
    x;
    y;
    z;
    static multiplyByScalar;
    static multiply;
    static clone;
    static ZERO;
    static distance;
    static distanceSquared;
    static equals;
    static magnitude;
    static normalize;
    static magnitudeSquared;
    static multiplyComponents;
    static equalsEpsilon;
    static angleBetween;
    static abs;
    static UNIT_X;
    static UNIT_Y;
    static UNIT_Z;
    static mostOrthogonalAxis;
    static divideByScalar;
    static negate;
    static fromElements;
    static unpack;
    static projectVector;
    constructor(x, y, z) {
        this.x = x || 0;
        this.y = y || 0;
        this.z = z || 0;
    }
}
Cartesian3.cross = function (left, right, result) {
    if (!result) {
        result = new Cartesian3();
    }
    const x = left.y * right.z - left.z * right.y;
    const y = left.z * right.x - left.x * right.z;
    const z = left.x * right.y - left.y * right.x;
    result.x = x;
    result.y = y;
    result.z = z;
    return result;
};
Cartesian3.dot = function (left, right) {
    return left.x * right.x + left.y * right.y + left.z * right.z;
};
Cartesian3.subtract = function (left, right, result) {
    if (!result) {
        result = new Cartesian3();
    }
    result.x = left.x - right.x;
    result.y = left.y - right.y;
    result.z = left.z - right.z;
    return result;
};
Cartesian3.add = function (left, right, result) {
    if (!result) {
        result = new Cartesian3();
    }
    result.x = left.x + right.x;
    result.y = left.y + right.y;
    result.z = left.z + right.z;
    return result;
};
Cartesian3.multiplyByScalar = function (cartesian, scalar, result) {
    if (!result) {
        result = new Cartesian3();
    }
    result.x = cartesian.x * scalar;
    result.y = cartesian.y * scalar;
    result.z = cartesian.z * scalar;
    return result;
};
Cartesian3.multiply = function (left, right, result) {
    if (!result) {
        result = new Cartesian3();
    }
    result.x = left.x * right.x;
    result.y = left.y * right.y;
    result.z = left.z * right.z;
    return result;
};
Cartesian3.clone = function (cartesian, result) {
    if (!result) {
        return new Cartesian3(cartesian.x, cartesian.y, cartesian.z);
    }
    result.x = cartesian.x;
    result.y = cartesian.y;
    result.z = cartesian.z;
    return result;
};
Cartesian3.ZERO = Cartesian3.clone(new Cartesian3(0, 0, 0));
Cartesian3.UNIT_X = Cartesian3.clone(new Cartesian3(1, 0, 0));
Cartesian3.UNIT_Y = Cartesian3.clone(new Cartesian3(0, 1, 0));
Cartesian3.UNIT_Z = Cartesian3.clone(new Cartesian3(0, 0, 1));
Cartesian3.distance = function (left, right) {
    return Math.sqrt(Cartesian3.distanceSquared(left, right));
};
Cartesian3.distanceSquared = function (left, right) {
    const x = left.x - right.x;
    const y = left.y - right.y;
    const z = left.z - right.z;
    return x * x + y * y + z * z;
};
Cartesian3.equals = function (left, right) {
    return left.x === right.x && left.y === right.y && left.z === right.z;
};
Cartesian3.magnitude = function (cartesian) {
    return Math.sqrt(cartesian.x * cartesian.x +
        cartesian.y * cartesian.y +
        cartesian.z * cartesian.z);
};
Cartesian3.magnitudeSquared = function (cartesian) {
    return (cartesian.x * cartesian.x +
        cartesian.y * cartesian.y +
        cartesian.z * cartesian.z);
};
Cartesian3.normalize = function (cartesian, result) {
    if (!result) {
        result = new Cartesian3();
    }
    const magnitude = Cartesian3.magnitude(cartesian);
    result.x = cartesian.x / magnitude;
    result.y = cartesian.y / magnitude;
    result.z = cartesian.z / magnitude;
    return result;
};
Cartesian3.multiplyComponents = function (left, right, result) {
    if (!result) {
        result = new Cartesian3();
    }
    result.x = left.x * right.x;
    result.y = left.y * right.y;
    result.z = left.z * right.z;
    return result;
};
Cartesian3.equalsEpsilon = function (left, right, relativeEpsilon, absoluteEpsilon) {
    return (left === right ||
        (defined(left) &&
            defined(right) &&
            HEditorMath.equalsEpsilon(left.x, right.x, relativeEpsilon, absoluteEpsilon) &&
            HEditorMath.equalsEpsilon(left.y, right.y, relativeEpsilon, absoluteEpsilon) &&
            HEditorMath.equalsEpsilon(left.z, right.z, relativeEpsilon, absoluteEpsilon)));
};
const angleBetweenScratch = new Cartesian3();
const angleBetweenScratch2 = new Cartesian3();
Cartesian3.angleBetween = function (left, right) {
    Cartesian3.normalize(left, angleBetweenScratch);
    Cartesian3.normalize(right, angleBetweenScratch2);
    const cosine = Cartesian3.dot(angleBetweenScratch, angleBetweenScratch2);
    const sine = Cartesian3.magnitude(Cartesian3.cross(angleBetweenScratch, angleBetweenScratch2, angleBetweenScratch));
    return Math.atan2(sine, cosine);
};
Cartesian3.abs = function (cartesian, result) {
    if (!result) {
        result = new Cartesian3();
    }
    result.x = Math.abs(cartesian.x);
    result.y = Math.abs(cartesian.y);
    result.z = Math.abs(cartesian.z);
    return result;
};
const mostOrthogonalAxisScrach = new Cartesian3();
Cartesian3.mostOrthogonalAxis = function (cartesian, result) {
    const f = Cartesian3.normalize(cartesian, mostOrthogonalAxisScrach);
    Cartesian3.abs(f, f);
    if (f.x <= f.y) {
        if (f.x <= f.z) {
            result = Cartesian3.clone(Cartesian3.UNIT_X, result);
        }
        else {
            result = Cartesian3.clone(Cartesian3.UNIT_Z, result);
        }
    }
    else if (f.y <= f.z) {
        result = Cartesian3.clone(Cartesian3.UNIT_Y, result);
    }
    else {
        result = Cartesian3.clone(Cartesian3.UNIT_Z, result);
    }
    return result;
};
Cartesian3.divideByScalar = function (cartesian, scalar, result) {
    if (!result) {
        result = new Cartesian3();
    }
    result.x = cartesian.x / scalar;
    result.y = cartesian.y / scalar;
    result.z = cartesian.z / scalar;
    return result;
};
Cartesian3.negate = function (cartesian, result) {
    if (!result) {
        result = new Cartesian3();
    }
    result.x = -cartesian.x;
    result.y = -cartesian.y;
    result.z = -cartesian.z;
    return result;
};
Cartesian3.fromElements = function (x, y, z, result) {
    if (!result) {
        result = new Cartesian3();
    }
    result.x = x;
    result.y = y;
    result.z = z;
    return result;
};
Cartesian3.unpack = function (array, index, result) {
    if (!result) {
        result = new Cartesian3();
    }
    result.x = array[index];
    result.y = array[index + 1];
    result.z = array[index + 2];
    return result;
};
Cartesian3.projectVector = function (cartesian, direction, result) {
    const scalar = Cartesian3.dot(cartesian, direction) / Cartesian3.dot(direction, direction);
    return Cartesian3.multiplyByScalar(direction, scalar, result);
};
//# sourceMappingURL=data:application/json;base64,