import HEditorMath from './Math';
export default class Cartesian2 {
    x;
    y;
    static lerp;
    static clone;
    static fromElements;
    static equals;
    static equalsEpsilon;
    static subtract;
    static add;
    static distance;
    static multiplyByScalar;
    static fromCartesian3;
    constructor(x, y) {
        this.x = x || 0.0;
        this.y = y || 0.0;
    }
}
Cartesian2.lerp = function (left, right, t, result) {
    const x = left.x + (right.x - left.x) * t;
    const y = left.y + (right.y - left.y) * t;
    if (!result) {
        result = new Cartesian2();
    }
    result.x = x;
    result.y = y;
    return result;
};
Cartesian2.clone = function (cartesian, result) {
    if (!result) {
        return new Cartesian2(cartesian.x, cartesian.y);
    }
    result.x = cartesian.x;
    result.y = cartesian.y;
    return result;
};
Cartesian2.fromElements = function (x, y, result) {
    if (!result) {
        return new Cartesian2(x, y);
    }
    result.x = x;
    result.y = y;
    return result;
};
Cartesian2.equals = function (left, right) {
    return left.x === right.x && left.y === right.y;
};
Cartesian2.equalsEpsilon = function (left, right, relativeEpsilon, absoluteEpsilon) {
    return (left === right &&
        HEditorMath.equalsEpsilon(left.x, right.x, relativeEpsilon, absoluteEpsilon) &&
        HEditorMath.equalsEpsilon(left.y, right.y, relativeEpsilon, absoluteEpsilon));
};
Cartesian2.subtract = function (left, right, result) {
    if (!result) {
        result = new Cartesian2();
    }
    result.x = left.x - right.x;
    result.y = left.y - right.y;
    return result;
};
Cartesian2.add = function (left, right, result) {
    if (!result) {
        result = new Cartesian2();
    }
    result.x = left.x + right.x;
    result.y = left.y + right.y;
    return result;
};
Cartesian2.distance = function (left, right) {
    return Math.sqrt((left.x - right.x) * (left.x - right.x) +
        (left.y - right.y) * (left.y - right.y));
};
Cartesian2.multiplyByScalar = function (cartesian, scalar, result) {
    if (!result) {
        result = new Cartesian2();
    }
    result.x = cartesian.x * scalar;
    result.y = cartesian.y * scalar;
    return result;
};
Cartesian2.fromCartesian3 = function (cartesian, result) {
    if (!result) {
        result = new Cartesian2();
    }
    result.x = cartesian.x;
    result.y = cartesian.y;
    return result;
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQ2FydGVzaWFuMi5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9FbmdpbmUvQ29yZS9DYXJ0ZXNpYW4yLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUNBLE9BQU8sV0FBVyxNQUFNLFFBQVEsQ0FBQTtBQUVoQyxNQUFNLENBQUMsT0FBTyxPQUFPLFVBQVU7SUFDN0IsQ0FBQyxDQUFRO0lBQ1QsQ0FBQyxDQUFRO0lBQ1QsTUFBTSxDQUFDLElBQUksQ0FLSTtJQUNmLE1BQU0sQ0FBQyxLQUFLLENBQTREO0lBQ3hFLE1BQU0sQ0FBQyxZQUFZLENBQTJEO0lBQzlFLE1BQU0sQ0FBQyxNQUFNLENBQWtEO0lBQy9ELE1BQU0sQ0FBQyxhQUFhLENBS1I7SUFDWixNQUFNLENBQUMsUUFBUSxDQUlBO0lBQ2YsTUFBTSxDQUFDLEdBQUcsQ0FJSztJQUNmLE1BQU0sQ0FBQyxRQUFRLENBQWlEO0lBQ2hFLE1BQU0sQ0FBQyxnQkFBZ0IsQ0FJUjtJQUNmLE1BQU0sQ0FBQyxjQUFjLENBR047SUFDZixZQUFZLENBQVUsRUFBRSxDQUFVO1FBQ2hDLElBQUksQ0FBQyxDQUFDLEdBQUcsQ0FBQyxJQUFJLEdBQUcsQ0FBQTtRQUNqQixJQUFJLENBQUMsQ0FBQyxHQUFHLENBQUMsSUFBSSxHQUFHLENBQUE7SUFDbkIsQ0FBQztDQUNGO0FBRUQsVUFBVSxDQUFDLElBQUksR0FBRyxVQUNoQixJQUFnQixFQUNoQixLQUFpQixFQUNqQixDQUFTLEVBQ1QsTUFBbUI7SUFFbkIsTUFBTSxDQUFDLEdBQUcsSUFBSSxDQUFDLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxDQUFDLEdBQUcsSUFBSSxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQTtJQUN6QyxNQUFNLENBQUMsR0FBRyxJQUFJLENBQUMsQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLENBQUMsR0FBRyxJQUFJLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFBO0lBQ3pDLElBQUksQ0FB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